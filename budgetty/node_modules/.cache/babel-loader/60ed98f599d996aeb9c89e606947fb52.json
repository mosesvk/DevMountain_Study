{"ast":null,"code":"import axios from 'axios';\nvar initialState = {\n  email: null,\n  firstName: null,\n  lastName: null\n}; //CREATE THE BASE ACTION TYPES YOU WILL USE\n\nvar REQUEST_USER_DATA = 'REQUEST_USER_DATA'; // THE ACTION CREATOR HERE DEFINES AN ACTION TYPE AND PAYLOAD THAT WILL BE USED BY THE REDUCER FUNCTION\n// TO UPDATE VALUES IN THE REDUX STORE. THIS FUNCTION ITSELF WILL BE INVOKED IN A \n// COMPONENT VIA PROPS ONCE THAT COMPONENT HAS CONNECTED TO IT VIA THE CONNECT METHOD\n\nexport var requestUserData = function requestUserData() {\n  var data = axios.get('/auth/user-data').then(function (res) {\n    return res.data;\n  });\n  return {\n    type: REQUEST_USER_DATA,\n    payload: data\n  };\n};\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  // USING A SWITCH STATEMENT INSIDE OF THIS FUNCTION ENABLES THE REDUX STORE TO UPDATE ITS STATE DYNAMICALLY BASED ON THE ACTION TYPE PASSED IN. THIS FUNCTION RUNS WHEN THE ACTION CREATORS ARE INVOKED IN A COMPONENT.\n  // NOTE: YOU USE THE PROMISE BASED SYNTAX '_FULFILLED' BECAUSE 'FULFILLED'/'PENDING'/'REJECTED' IS ADDED BY REDUX-PROMISE  MIDDLEWARE WHEN MAKING PROMISE BASED REQUESTS (REQUESTS THAT RECEIVE RESPONSES) THROUGH REDUX. ACTIONS THAT AREN'T RELATED TO PPROMISE BASED REQUESTS SHOULD NOT HAVE 'FULFILLED'/'PENDING'/'REJECTED' CONCATENATED TO THEM. IF YOU DIDN'T USE REDUX-PROMISE-MIDDLEWARE, YOU SHOULD ALSO NOT CONCATENATE THOSE STRINGS.\n  switch (action.type) {\n    case REQUEST_USER_DATA + '_FULFILLED':\n      var _action$payload$user = action.payload.user,\n          email = _action$payload$user.email,\n          firstName = _action$payload$user.firstName,\n          lastName = _action$payload$user.lastName;\n      return {\n        email: email,\n        firstName: firstName,\n        lastName: lastName\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/mosesvk/Documents/Programming/DevMountain_Study/budgetty/src/ducks/userReducer.js"],"names":["axios","initialState","email","firstName","lastName","REQUEST_USER_DATA","requestUserData","data","get","then","res","type","payload","reducer","state","action","user"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,SAAS,EAAE,IAFQ;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB,C,CAMA;;AACA,IAAMC,iBAAiB,GAAG,mBAA1B,C,CAGA;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,MAAIC,IAAI,GAAGP,KAAK,CAACQ,GAAN,CAAU,iBAAV,EAA6BC,IAA7B,CAAkC,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACH,IAAR;AAAA,GAArC,CAAX;AACA,SAAO;AACLI,IAAAA,IAAI,EAAEN,iBADD;AAELO,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CANM;AAQP,eAAe,SAASM,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBb,YAAsB;AAAA,MAARc,MAAQ;;AAC9D;AAEA;AAEE,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKN,iBAAiB,GAAG,YAAzB;AAAA,iCACyCU,MAAM,CAACH,OAAP,CAAeI,IADxD;AAAA,UACUd,KADV,wBACUA,KADV;AAAA,UACiBC,SADjB,wBACiBA,SADjB;AAAA,UAC4BC,QAD5B,wBAC4BA,QAD5B;AAEE,aAAO;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,SAAS,EAATA,SAAT;AAAoBC,QAAAA,QAAQ,EAARA;AAApB,OAAP;;AACF;AACE,aAAOU,KAAP;AALJ;AAOD","sourcesContent":["import axios from 'axios';\n\nconst initialState = {\n  email: null,\n  firstName: null,\n  lastName: null\n};\n\n//CREATE THE BASE ACTION TYPES YOU WILL USE\nconst REQUEST_USER_DATA = 'REQUEST_USER_DATA'\n\n\n// THE ACTION CREATOR HERE DEFINES AN ACTION TYPE AND PAYLOAD THAT WILL BE USED BY THE REDUCER FUNCTION\n// TO UPDATE VALUES IN THE REDUX STORE. THIS FUNCTION ITSELF WILL BE INVOKED IN A \n// COMPONENT VIA PROPS ONCE THAT COMPONENT HAS CONNECTED TO IT VIA THE CONNECT METHOD\nexport const requestUserData = () => {\n  let data = axios.get('/auth/user-data').then(res => res.data)\n  return {\n    type: REQUEST_USER_DATA,\n    payload: data\n  }\n}\n\nexport default function reducer(state = initialState, action) {\n// USING A SWITCH STATEMENT INSIDE OF THIS FUNCTION ENABLES THE REDUX STORE TO UPDATE ITS STATE DYNAMICALLY BASED ON THE ACTION TYPE PASSED IN. THIS FUNCTION RUNS WHEN THE ACTION CREATORS ARE INVOKED IN A COMPONENT.\n\n// NOTE: YOU USE THE PROMISE BASED SYNTAX '_FULFILLED' BECAUSE 'FULFILLED'/'PENDING'/'REJECTED' IS ADDED BY REDUX-PROMISE  MIDDLEWARE WHEN MAKING PROMISE BASED REQUESTS (REQUESTS THAT RECEIVE RESPONSES) THROUGH REDUX. ACTIONS THAT AREN'T RELATED TO PPROMISE BASED REQUESTS SHOULD NOT HAVE 'FULFILLED'/'PENDING'/'REJECTED' CONCATENATED TO THEM. IF YOU DIDN'T USE REDUX-PROMISE-MIDDLEWARE, YOU SHOULD ALSO NOT CONCATENATE THOSE STRINGS.\n\n  switch (action.type) {\n    case REQUEST_USER_DATA + '_FULFILLED':\n      const { email, firstName, lastName } = action.payload.user\n      return { email, firstName, lastName };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}